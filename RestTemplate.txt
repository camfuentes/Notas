Implements CommandLineRunner

@Overrive
public void run (String ... args) thwos Exception

RestTemplate restTemplate = new RestTemplate();
HttpHeaders heades = new HttpHeaders();
headers.set("APIKey","5484215484521");  //Nombre Header, Valor Header
headers.setAccept(Collections.singletonList(MediaType));
String resorceURL = "" //url del endpoint
HttpEnitity<String> entity = newHttpEntity<String>(headers);
ResponseEntity<String> response = restTemplate.exchage(resourceURL,HttpMethod.POST, entity, String.class);

ResponseEntity<POJO[]> response = restTemplate.exchage(resourceURL,HttpMethod.POST, entity, POJO[].class);

response.getStatusCode()==HttpStatus.OK
response.getBody();







import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

public RestTemplate getRestTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
    TrustStrategy acceptingTrustStrategy = new TrustStrategy() {
        @Override
        public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
            return true;
        }
    };
    SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();
    SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, new NoopHostnameVerifier());
    CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();
    HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
    requestFactory.setHttpClient(httpClient);
    RestTemplate restTemplate = new RestTemplate(requestFactory);
    return restTemplate;
}


